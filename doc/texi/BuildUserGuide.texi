@input texinfo @c -*- Texinfo -*-
@c %**start of header
@setfilename BuildUserGuide.info
@include base/article.texi
@include build/command.texi
@paragraphindent none
@c %**end of header

@majorheading @value{HB.title} Build User Guide
@contents

@c %**-------------------------------------------------------------------------
@chapter Introduction
This guide documents the recommended process to build @value{HB.name} from the official source-code repository. @b{Building from any other source is not unsupported}.

@chapter Quickstart
This chapter is for the impatient or those just looking for a quick summary of the commands used to launch a typical build with the fewest commands possible. For more control over the build process please skip this section and jump to @ref{Build Process} for full details.

@example
@COMMAND.checkout{}
@COMMAND.configure.launch{}
@end example

The above is an special streamlined invocation of @command{configure} which performs the following steps automatically:

@itemize
@item assert scratch directory @file{build/} does not exist
@item create scratch directory @file{build/}
@item change to directory @file{build/}
@item launch @command{make}
@item capture build output to @file{build/log.txt}
@item echo build output
@end itemize

@c %**-------------------------------------------------------------------------
@anchor{Build Process}
@chapter Build Process

@anchor{Checkout}
@section Checkout Sources
Checkout @value{HB.name} from the official source-code repository.

@example
@COMMAND.checkout{}
@end example

Sources are checked out from the @samp{@value{HB.repo.branch}} branch. This document was generated from that very branch, and for example purposes, we will use exactly the same branch.

If you have write-access to the repository, then you may add the appropriate login/password information as needed. It is recommended to use Subversion 1.5.0 or higher. Lower versions should also work.

@anchor{Configure}
@section Configure
Configure the build system.

@example
@COMMAND.configure{}
@end example

Create a scratch directory which will contain all files created during the build process. The directory name is arbitrary but we recommend something simple and descriptive. One directory is required for each distinctly configured build. We name our directory @file{build} for example purposes.

The @command{configure} utility accepts many options. It is recommended that you specify @command{--help} for the complete list of options. The following options are detailed:

@table @samp
@item --help
List available options.

@item --debug=MODE
Select debug mode. Must be one of @samp{none}, @samp{min}, @samp{std}, @samp{max}.
This generally maps to gcc options @samp{-g0}, @samp{-g1}, @samp{-g2}, @samp{-g3}.

@item --optimize=MODE
Select optimize mode. Must be one of @samp{none}, @samp{speed}, @samp{size}.
This generally maps to gcc options @samp{-g0}, @samp{-O0}, @samp{-O3}, @samp{-Os}.

@item --arch=MODE
Select build architecture. The available architectures vary by platform. Most platforms support exactly one architecture except @value{OS.osx} which has support for various universal binary architectures. The available choices are hard-coded per platform and no sanity checks for the required tools are performed.

@item --gcc=EXE
Specify the @command{gcc} executable to use where @b{EXE} is the executable name which is either absolute or environment @samp{PATH} is searched accordingly.
@end table

Clean-room procedures dictate that when certain factors change, old builds should be scrapped and new builds configured. This is the main reason for requiring a scratch directory; to promote consistent, reliable and clean software builds. The following is a short list of some of the reasons why someone may choose to scrap an existing build:

@itemize
@item configure with different options
@item subversion working dir is updated and you want configure to re-evaluate working dir metadata.
@item build corruption is suspected
@end itemize

There are generally two methods for scrapping a build. The @file{build} directory can be recusrively removed which has the effect of loosing your existing configuration but does guarantee no residuals are left behind. The other method is to use ask the build system to perform an @command{xclean}. This is known to work well but will leave empty directories behind. However, the configuration is left intact. See @ref{Extra Clean} for further details.

@anchor{Build}
@section Build
Build main product. All necessary dependencies are also built if required.

@example
@COMMAND.build{}
@end example

Parallel builds may optionally be enabled. Be aware that while a parallel build may save time on systems with additional cores, the output is often mixed, overlapped and sometimes even corrupted with binary characters. Thus if you experience a build issue, you should clean and redo the build in default serial mode to produce a readable log. The following command allows for up to 4 concurrent jobs via make:

@example
make -j4
@end example

@anchor{Clean}
@section Clean
Clean all build output excluding contrib modules. Configuration is retained.

@example
@COMMAND.clean{}
@end example

@anchor{Extra Clean}
@section Extra Clean
Clean all build output including contrib modules. Configuration is retained.

@example
@COMMAND.xclean{}
@end example

@c %**-------------------------------------------------------------------------
@anchor{Make Targets}
@chapter Make Targets

The build system supports passing many kinds of targets some of which become very useful in normal development cycles. The targets by convention are lower-case words passed to @command{make}. Global targets are one-word targets. Scoped targets are usually two-words seperated by a period.

@anchor{Global Targets}
@section Global

@table @samp
@item make
Alias for @samp{make build}.

@item make build
Build main product. All necessary dependencies are also built if required.

@item make clean
Clean all build output excluding contrib modules. Configuration is retained.

@item make xclean
Clean all build output including contrib modules. Configuration is retained.
@end table

@anchor{General Module Targets}
@section General Modules

General modules such as @samp{libhb} and @samp{test} have the following scoped targets:

@table @samp
@item make @i{MODULE}.build
Build @i{MODULE}.

@item make @i{MODULE}.clean
Clean build output for @i{MODULE}.
@end table

@anchor{Contrib Module Targets}
@section Contrib Modules

Contrib modules such as @samp{a52dec}, @samp{bzip2}, @samp{faac}, @samp{faad2}, @samp{ffmpeg}, @samp{lame}, @samp{libdca}, @samp{libdvdread}, @samp{libmkv}, @samp{libmp4v2}, @samp{libogg}, @samp{libsamplerate}, @samp{libtheora}, @samp{libvorbis}, @samp{mpeg2dec}, @samp{x264}, @samp{xvidcore} and @samp{zlib} have the following scoped targets:

@table @samp
@item make @i{MODULE}.fetch
Download source tarball from the Internet and save to @file{TOP/downloads} directory. No checksumming is performed.

@item make @i{MODULE}.extract
Extract source tarball into @file{build} tree.

@item make @i{MODULE}.patch
Apply appropriate patches (if any) to module sources.

@item make @i{MODULE}.configure
Configure module sources.
This usually invokes autotool configure.

@item make @i{MODULE}.build
Build module.
This usually invokes autotool build.

@item make @i{MODULE}.install
Install module products such as headers and libraries into @file{build} tree.
This usually invokes autotool install.

@item make @i{MODULE}.uninstall
Uninstall module products; generally the reverse of install.
This usually invokes autotool uninstall.

@item make @i{MODULE}.clean
Clean module; generally the reverse of build.
This usually invokes autotool clean.

@item make @i{MODULE}.xclean
Extra clean module; first invokes uninstall then recursively removes the module build directory.
@end table

@anchor{Contrib Aggregate Targets}
@section Contrib Aggregate

For convenience, the following targets aggregate the all contrib modules' respective targets together:

@itemize
@item make contrib.fetch
@item make contrib.extract
@item make contrib.patch
@item make contrib.configure
@item make contrib.build
@item make contrib.install
@item make contrib.uninstall
@item make contrib.clean
@item make contrib.xclean
@end itemize

@c %**-------------------------------------------------------------------------
@anchor{Platform}
@chapter Platform Requirements and Notes

The build system supports various platforms of interest to the project. However this does not mean it supports all plaforms. If the platform is not listed in this chapter, then it is not supported.

The following tools are used on various platforms and it is recommended you use these versions or newer:

@itemize @bullet
@item python - Python 2.4.6
@item curl - curl 7.19.3 (or wget)
@item m4 - GNU M4 1.4.6
@item make - GNU Make 3.81
@item patch - Patch 2.5.8
@item tar - GNU tar 1.15.1
@item wget - GNU Wget 1.11.4 (or curl)
@end itemize

@anchor{@value{OS.osx}}
@section @value{OS.osx}

Building on @value{OS.osx} is well supported. It is the reference platform for @value{HB.name}. The following are the recommended specifications for this platform; but is not necessarily the only configuration that is possible:

@itemize @bullet
@item Mac Intel hardware
@item @value{OS.osx} 10.5.6
@item Xcode-3.1.2
@item gcc 4.0.1 (Apple Inc. build 5490)
@item yasm 0.7.2.2153 (for i386 or x86_64 architectures)
@end itemize

@include build/platform.common.bundled.texi

@anchor{@value{OS.cygwin}}
@section @value{OS.cygwin}

Building on @value{OS.cygwin} is supported. The following are the recommended specifications for this platform; but is not necessarily the only configuration that is possible:

@itemize @bullet
@item Intel 32-bit or 64-bit hardware
@item @value{OS.cygwin}, gcc 4.3.2
@item yasm 0.7.1.2093 (for i386 or x86_64 architectures)
@end itemize

@quotation Note
As of this writing, @value{OS.cygwin} has available to it several versions of gcc; only one of which may be found and
used in the path as @code{gcc} and @code{g++}. Configure will thus find what is probably the older version of gcc in a typical @value{OS.cygwin} environment. If you desire to build with the newer gcc, it is found in the path as @command{gcc-4} and @command{g++-4} respectively and you must indicate to configure the desired versions. The following syntax should do the trick:
@end quotation

@example
../configure --gcc=gcc-4
@end example

@anchor{@value{OS.linux}}
@section @value{OS.linux}

Building on @value{OS.linux} is supported. The following are the recommended specifications for this platform; but is not necessarily the only configuration that is possible:

@itemize @bullet
@item Intel 32-bit or 64-bit hardware
@item Fedora 8, gcc 4.1.2, yasm 0.6.2.1985
@item Fedora 9, gcc 4.3.0, yasm 0.6.2.1985
@item Fedora 10, gcc 4.3.2, yasm 0.7.1.2093
@item gcc 4.0.0 or higher is reported to work
@end itemize

@include build/platform.common.bundled.texi
